{"componentChunkName":"component---src-templates-lesson-template-js","path":"/bitwise-operator","result":{"data":{"markdownRemark":{"html":"<p>In this lesson, we are going to learn about the bit-wise operators, and some Bit-manipulation techniques to get optimized solutions. These concepts are very important from competitive programming as well as interviews point of view. Okay, so let's learn these techniques:\nIn this lesson, we are going to learn about the bit-wise operators, and some Bit-manipulation techniques to get optimized solutions. These concepts are very important from competitive programming as well as interviews point of view. Okay, so let's learn these techniques:</p>\n<h2 id=\"bit-manipulation\" style=\"position:relative;\"><a href=\"#bit-manipulation\" aria-label=\"bit manipulation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bit Manipulation</h2>\n<p>Bit manipulation is the process of applying logical operations on a sequence of bits, the smallest form of data in a computer, to achieve a required result. Bit manipulation has constant time complexity and process in parallel, meaning it is very efficient on all systems.</p>\n<p>Most programming languages will have you work with abstractions, like objects or variables, rather than the bits they represent. However, direct bit manipulation is needed to improve performance and reduce error in certain situations.</p>\n<p>Bit manipulation requires a strong knowledge of binary and binary conversion.</p>\n<p>Here’s a few examples of tasks that require bit manipulation:</p>\n<ul>\n<li>Low-level device control</li>\n<li>Error detection and correction algorithms</li>\n<li>Data compression</li>\n<li>Encryption algorithms</li>\n<li>Optimization</li>\n</ul>\n<h2 id=\"bitwise-manipulation-and-coding-interviews\" style=\"position:relative;\"><a href=\"#bitwise-manipulation-and-coding-interviews\" aria-label=\"bitwise manipulation and coding interviews permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bitwise Manipulation and Coding Interviews</h2>\n<p>Bit manipulation is also a common topic in coding interviews, especially with FAANG companies. These interviewers expect you to have a basic understanding of bits, fundamental bit operators, and generally understand the thought process behind bit manipulation.</p>\n<blockquote>\n<p>Having this knowledge demonstrates that you’re a well-rounded developer who understands both the specific tools and the foundation of computer science.</p>\n</blockquote>\n<p>If you’re applying for a role that will work with embedded systems or other low-level systems, you’ll encounter more bit questions. In short, the closer your role is to machine level, the more bit manipulation questions you’ll encounter.</p>\n<p>The best way to prepare for bit manipulation questions is to practice using each bitwise operator and brush up on your binary to decimal conversions.</p>\n<h2 id=\"bitwise-operators-in-java\" style=\"position:relative;\"><a href=\"#bitwise-operators-in-java\" aria-label=\"bitwise operators in java permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bitwise Operators In Java</h2>\n<p>You are no doubt familiar with the arithmetic operators such as + - * / or %. You are also aware of logical operators such as &#x26; or |. Turns out there is another, a slightly less known set of operators, which manipulate numbers on bit level. Internally, every number is stored in a binary format - that is 0 and 1. Bitwise operators are used for performing manipulation of bits of a number. These can be used with any type of integer data types (char, short, int, etc).</p>\n<p>These operators can be performed on integer types -</p>\n<ul>\n<li>byte (8 bit)</li>\n<li>short (16 bit)</li>\n<li>int (32 bit)</li>\n<li>long (64 bit), and even</li>\n<li>char (16 bit)</li>\n</ul>\n<p>Now let's see its type one by one:</p>\n<h2 id=\"1-unary-bitwise-complement-\" style=\"position:relative;\"><a href=\"#1-unary-bitwise-complement-\" aria-label=\"1 unary bitwise complement  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Unary bitwise complement [~]</h2>\n<p>This fancy name basically means bit negation. It takes every single bit of the number and flips its value,i.e, ~0 becomes 1 and vice versa. It is the 1's complement of the number. Unary means that it needs just one operand. The operator is <code class=\"language-text\">~</code> and it is just placed before the number:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">0101</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">Bitwise</span> <span class=\"token class-name\">Complement</span> <span class=\"token class-name\">Operation</span> of <span class=\"token number\">5</span>\n\n<span class=\"token operator\">~</span> <span class=\"token number\">0101</span>\n ________\n  <span class=\"token number\">1010</span>  <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> decimal<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"2-bitwise-and-\" style=\"position:relative;\"><a href=\"#2-bitwise-and-\" aria-label=\"2 bitwise and  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Bitwise AND [&#x26;]</h2>\n<p>Unlike bitwise complement operator, other bitwise operators need two operands.</p>\n<p>A &#x26; B means that all the bits of both numbers are compared one by one and the resulting number is calculated based on values of the bits from numbers A and B. Bitwise AND is similar to logical AND in a sense that it results in 1 only when the two compared bits are both equal to 1. Otherwise, it results in 0.</p>\n<p>For example: 1010 &#x26; 1100 would result in 1000 as the first bit from the left is the only one where both operands contain 1.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">0101</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">0111</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">Bitwise</span> AND <span class=\"token class-name\">Operation</span> of <span class=\"token number\">5</span> and <span class=\"token number\">7</span>\n  <span class=\"token number\">0101</span>\n<span class=\"token operator\">&amp;</span> <span class=\"token number\">0111</span>\n ________\n  <span class=\"token number\">0101</span>  <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> decimal<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"3-bitwise-or---\" style=\"position:relative;\"><a href=\"#3-bitwise-or---\" aria-label=\"3 bitwise or    permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Bitwise OR [ | ]</h2>\n<p>Bitwise OR results in 1 when at least one of the compared bits is 1 (or both), otherwise it results in 0.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">0101</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">0111</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">Bitwise</span> OR <span class=\"token class-name\">Operation</span> of <span class=\"token number\">5</span> and <span class=\"token number\">7</span>\n  <span class=\"token number\">0101</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0111</span>\n ________\n  <span class=\"token number\">0111</span>  <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> decimal<span class=\"token punctuation\">)</span> </code></pre></div>\n<h2 id=\"4-bitwise-exclusive-or-xor-\" style=\"position:relative;\"><a href=\"#4-bitwise-exclusive-or-xor-\" aria-label=\"4 bitwise exclusive or xor  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Bitwise Exclusive OR (XOR) [^]</h2>\n<p>xclusive OR (XOR) results in 1 only if both the compared bits have a different value, otherwise, it results in 0.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">0101</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token number\">7</span> <span class=\"token operator\">=</span> <span class=\"token number\">0111</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> <span class=\"token class-name\">Binary</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token class-name\">Bitwise</span> XOR <span class=\"token class-name\">Operation</span> of <span class=\"token number\">5</span> and <span class=\"token number\">7</span>\n  <span class=\"token number\">0101</span>\n<span class=\"token operator\">^</span> <span class=\"token number\">0111</span>\n ________\n  <span class=\"token number\">0010</span>  <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">In</span> decimal<span class=\"token punctuation\">)</span> </code></pre></div>\n<table>\n<thead>\n<tr>\n<th>A</th>\n<th>B</th>\n<th>A AND B</th>\n<th>A    B</th>\n<th>A XOR B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java program to illustrate</span>\n<span class=\"token comment\">// bitwise operators</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> operators <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Initial values</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// bitwise and</span>\n        <span class=\"token comment\">// 0101 &amp; 0111=0101 = 5</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a&amp;b = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// bitwise or</span>\n        <span class=\"token comment\">// 0101 | 0111=0111 = 7</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a|b = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">|</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// bitwise xor</span>\n        <span class=\"token comment\">// 0101 ^ 0111=0010 = 2</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a^b = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">^</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// bitwise not</span>\n        <span class=\"token comment\">// ~0101=1010</span>\n        <span class=\"token comment\">// will give 2's complement of 1010 = -6</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"~a = \"</span> <span class=\"token operator\">+</span> <span class=\"token operator\">~</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// can also be combined with</span>\n        <span class=\"token comment\">// assignment operator to provide shorthand</span>\n        <span class=\"token comment\">// assignment</span>\n        <span class=\"token comment\">// a=a&amp;b</span>\n        a <span class=\"token operator\">&amp;=</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a= \"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"output\" style=\"position:relative;\"><a href=\"#output\" aria-label=\"output permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a&amp;b = 5\na|b = 7\na^b = 2\n~a = -6\na= 5</code></pre></div>\n<h2 id=\"5-signed-left-shift-\" style=\"position:relative;\"><a href=\"#5-signed-left-shift-\" aria-label=\"5 signed left shift  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Signed Left Shift [&#x3C;&#x3C;]</h2>\n<p>Signed Left Shift takes two operands. It takes the bit pattern of the first operand and shifts it to the left by the number of places given by the second operand. For example 5 &#x3C;&#x3C; 3: What happens in this case - Every bit in the binary representation of the integer 5 is shifted by 3 positions to the left. All the places on the left are padded by zeros. That is: <code class=\"language-text\">00000101</code> becomes <code class=\"language-text\">00101000</code>.</p>\n<p>You can note that the integer result of 5 &#x3C;&#x3C; 3 is 40. That shows that shifting a number by one is equivalent to multiplying it by 2, or more generally left shifting a number by n positions is equivalent to multiplication by <code class=\"language-text\">2^n</code>. In this case, it is 5*2^3 = 40.</p>\n<ul>\n<li>Even though you can use shifting of byte, short or char, they are promoted to 32-bit integer before the shifting</li>\n<li>Bit-shift operators never throw an exception</li>\n<li>The right operand (the number of positions to shift) is reduced to modulo 32. That is 5 &#x3C;&#x3C;35 is equivalent to 5 &#x3C;&#x3C; 3.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">=</span> <span class=\"token number\">0000</span> <span class=\"token number\">0101</span>\nb <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">=</span> <span class=\"token number\">1111</span> <span class=\"token number\">0110</span>\n\na <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">0000</span> <span class=\"token number\">1010</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\na <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">0001</span> <span class=\"token number\">0100</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span> \n\nb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">1110</span> <span class=\"token number\">1100</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">20</span>\nb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1101</span> <span class=\"token number\">1000</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span> </code></pre></div>\n<h2 id=\"6-signed-right-shift-\" style=\"position:relative;\"><a href=\"#6-signed-right-shift-\" aria-label=\"6 signed right shift  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Signed Right Shift [>>]</h2>\n<p>Signed right shift moves all the bits by given number of positions to the right. However, it preserves the sign. Positive numbers remain positive and negative ones remain negative. Similar to left shift, the right shift of n positions is equivalent to division by 2^n. Or division by 2^n -1 in case of odd numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\na<span class=\"token operator\">>></span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> \n\n<span class=\"token class-name\">Example</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\na <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> \na<span class=\"token operator\">>></span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span>\n<span class=\"token class-name\">We</span> preserve the sign bit<span class=\"token punctuation\">.</span></code></pre></div>\n<h2 id=\"7-unsigned-right-shift-\" style=\"position:relative;\"><a href=\"#7-unsigned-right-shift-\" aria-label=\"7 unsigned right shift  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Unsigned Right Shift [>>>]</h2>\n<p>Unlike the signed shift, the unsigned one does not take sign bits into consideration, it just shifts all the bits to the right and pads the result with zeros from the left. That means that for negative numbers, the result is always positive. Signed and unsigned right shifts have the same result for positive numbers.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">a <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\na<span class=\"token operator\">>>></span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\na <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span> \na<span class=\"token operator\">>>></span><span class=\"token number\">1</span> <span class=\"token operator\">=</span> <span class=\"token number\">2147483643</span>\nDOES NOT preserve the sign bit<span class=\"token punctuation\">.</span> </code></pre></div>\n<p>This operator shifts the first operand to the specified number of bits to the right. Excess bits shifted off to the right are <code class=\"language-text\">discarded</code>. Zero bits are shifted in from the left. The sign bit becomes 0, so the result is <code class=\"language-text\">always non-negative</code>. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.</p>\n<p>For non-negative numbers, zero-fill right shift and sign-propagating right shift yield the same result. For example, 9 >>> 2 yields 2, the same as 9 >> 2:</p>\n<h2 id=\"8-unsigned-left-shift-\" style=\"position:relative;\"><a href=\"#8-unsigned-left-shift-\" aria-label=\"8 unsigned left shift  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. Unsigned Left Shift [&#x3C;&#x3C;&#x3C;]</h2>\n<p>Unlike unsigned Right Shift, there is no “&#x3C;&#x3C;&#x3C;” operator in Java, because the logical (&#x3C;&#x3C;) and arithmetic left-shift (&#x3C;&#x3C;&#x3C;) operations are identical.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token number\">9</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token number\">00000000000000000000000000001001</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">9</span> <span class=\"token operator\">>>></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token number\">00000000000000000000000000000010</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>However, this is not the case for negative numbers. For example, -9 >>> 2 yields 1073741821, which is different than -9 >> 2 (which yields -3):</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token number\">11111111111111111111111111110111</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token operator\">>>></span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token number\">00111111111111111111111111111101</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1073741821</span> <span class=\"token punctuation\">(</span>base <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Example</th>\n<th>Is equivalent to</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OR=</td>\n<td>x OR= 5</td>\n<td>x = x OR 5</td>\n</tr>\n<tr>\n<td>^=</td>\n<td>x ^= 5</td>\n<td>x = x ^ 5</td>\n</tr>\n<tr>\n<td>&#x26;=</td>\n<td>x &#x26;= 5</td>\n<td>x = x &#x26; 5</td>\n</tr>\n<tr>\n<td>&#x3C;&#x3C;=</td>\n<td>x &#x3C;&#x3C;= 5</td>\n<td>x = x &#x3C;&#x3C; 5</td>\n</tr>\n<tr>\n<td>>>=</td>\n<td>x >>= 5</td>\n<td>x = x >> 5</td>\n</tr>\n<tr>\n<td>>>>=</td>\n<td>x >>>= 5</td>\n<td>x = x >>> 5</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java program to illustrate</span>\n<span class=\"token comment\">// shift operators</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> operators <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n \n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// left shift operator</span>\n        <span class=\"token comment\">// 0000 0101&lt;&lt;2 =0001 0100(20)</span>\n        <span class=\"token comment\">// similar to 5*(2^2)</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a&lt;&lt;2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// right shift operator</span>\n        <span class=\"token comment\">// 0000 0101 >> 2 =0000 0001(1)</span>\n        <span class=\"token comment\">// similar to 5/(2^2)</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b>>2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token comment\">// unsigned right shift operator</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b>>>2 = \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">>>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"output-1\" style=\"position:relative;\"><a href=\"#output-1\" aria-label=\"output 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a&lt;&lt;2 = 20\nb>>2 = -3\nb>>>2 = 1073741821</code></pre></div>\n<h2 id=\"bitwise-tricks-and-some-questions\" style=\"position:relative;\"><a href=\"#bitwise-tricks-and-some-questions\" aria-label=\"bitwise tricks and some questions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bitwise Tricks And Some Questions</h2>\n<p>Now, let’s look at a few tricks you can do using bitwise operators.</p>\n<p>These are often used as interview questions to check if you’ve reviewed basic bit manipulation and can apply it to day-to-day coding tasks.</p>\n<h3 id=\"q1-check-for-even--odd\" style=\"position:relative;\"><a href=\"#q1-check-for-even--odd\" aria-label=\"q1 check for even  odd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q1. Check for EVEN / ODD</h3>\n<p>To check a number is even or odd, we need to look at the number in its binary form first, lets take an eg, 4 ,i.e, <code class=\"language-text\">0100</code>, if we look carefully then we will find out that the 1 present in the number is at <code class=\"language-text\">power of 2</code> position, lets take another example now, 6 ,i.e, <code class=\"language-text\">0110</code>, here both the 1's are at <code class=\"language-text\">power of 2</code> position and now we can conclude that in binary form if the number is at power of 2 position the it is even. Lets check for odd no. now, eg, 5 ,i.e, <code class=\"language-text\">0101</code> here the least significant digit(or <code class=\"language-text\">LSD</code>) is <code class=\"language-text\">not</code> at the <code class=\"language-text\">power of 2</code> position and thus it is odd.</p>\n<p>Now, lets look how to solve this,</p>\n<p>if we and a number with one then we know we get back that original number, so if we and the last digit with one and if we get 1 then it would be a odd number else it would be even.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"q2-convert-characters-to-uppercaselowercase\" style=\"position:relative;\"><a href=\"#q2-convert-characters-to-uppercaselowercase\" aria-label=\"q2 convert characters to uppercaselowercase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q2. Convert characters to Uppercase/Lowercase</h3>\n<p>This trick tests your knowledge of uppercase and lowercase characters in binary. You can convert any character, <code class=\"language-text\">ch</code>, to the opposite case using <code class=\"language-text\">ch ^= 32</code>.</p>\n<p>This is because the binary representation of lowercase and uppercase letters are nearly identical, with only 1 bit of difference.</p>\n<p>Using the XOR operation lets us toggle that single bit and swap it to the opposite value, therefore making a lowercase character uppercase or vice versa.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> \n<span class=\"token punctuation\">{</span> \n      \n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span> \n      \n    <span class=\"token comment\">// tOGGLE cASE = swaps CAPS to lower </span>\n    <span class=\"token comment\">// case and lower case to CAPS </span>\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toggleCase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        \n            <span class=\"token comment\">// Bitwise XOR with 32 </span>\n            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">^=</span><span class=\"token number\">32</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span> \n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n      \n    <span class=\"token comment\">/* Driver program */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span>  \n    <span class=\"token punctuation\">{</span> \n        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"CheRrY\"</span><span class=\"token punctuation\">;</span> \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Toggle case: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        str <span class=\"token operator\">=</span> <span class=\"token function\">toggleCase</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n          \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Original string: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        str <span class=\"token operator\">=</span> <span class=\"token function\">toggleCase</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     \n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> </code></pre></div>\n<h3 id=\"output-2\" style=\"position:relative;\"><a href=\"#output-2\" aria-label=\"output 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Toggle case: cHErRy\nOriginal string: CheRrY</code></pre></div>\n<h3 id=\"q3-find-number-of-setbits\" style=\"position:relative;\"><a href=\"#q3-find-number-of-setbits\" aria-label=\"q3 find number of setbits permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q3. Find Number of Setbits</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CountSetBit</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">&amp;=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> number <span class=\"token operator\">=</span> <span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SetBit Count is : \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"output-3\" style=\"position:relative;\"><a href=\"#output-3\" aria-label=\"output 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">SetBit Count is : 6</code></pre></div>\n<p>In this approach, we count only the set bits. So,</p>\n<ul>\n<li>If a number has 2 set bits, then the while loop runs two times.</li>\n<li>If a number has 4 set bits, then the while loop runs four times.</li>\n</ul>\n<h3 id=\"q4-single-number\" style=\"position:relative;\"><a href=\"#q4-single-number\" aria-label=\"q4 single number permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q4. Single Number</h3>\n<p>You are given an array in which every number appears twice except one number, return that number.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleNumber</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> xor <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            xor <span class=\"token operator\">^=</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> xor<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Element appearing one time is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"output-4\" style=\"position:relative;\"><a href=\"#output-4\" aria-label=\"output 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Element appearing one time is 9</code></pre></div>\n<p>This solution relies on the following logic:</p>\n<ul>\n<li>If we take XOR of zero and some bit, it will return that bit: a ^ 0 = a</li>\n<li>If we take XOR of two same bits, it will return 0: a ^ a = 0</li>\n<li>For n numbers, the below math can be applied: a ^ b ^ a = (a ^ a) ^ b = 0 ^ b = b</li>\n</ul>\n<p>Therefore, we can XOR all bits together to find the unique number.</p>\n<h3 id=\"q5-get-first-set-bit\" style=\"position:relative;\"><a href=\"#q5-get-first-set-bit\" aria-label=\"q5 get first set bit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q5. Get First Set Bit</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstSetBitPosition</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n \n        <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n \n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> k<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First setbit position for number: 18 is -> \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First setbit position for number: 5 is -> \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First setbit position for number: 32 is -> \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">helper</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"output-5\" style=\"position:relative;\"><a href=\"#output-5\" aria-label=\"output 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Output:</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">First setbit position for number: 18 is -> 2\nFirst setbit position for number: 5 is -> 1\nFirst setbit position for number: 32 is -> 6</code></pre></div>\n<p>The logic of this solution relies on a combination of left shifting and the AND operation.</p>\n<p>Essentially, we first check if the rightmost significant bit is the set bet using <code class=\"language-text\">bit &amp; 1</code>. If not, we keep shifting left and checking until we find the bit that makes our AND operation yield 1.</p>\n<p>The number of shifts is tracked by our pointer, k. Once we do find the set bit, we return k as our answer.</p>\n<hr>","frontmatter":{"path":"/bitwise-operator","title":"Complete Bitwise Operators","order":"10B","section":"Maths for DSA"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"4B","path":"/arraylist","title":"ArrayList In Java"}}},{"node":{"frontmatter":{"order":"24A","path":"/assignment","title":"Assignments"}}},{"node":{"frontmatter":{"order":"4A","path":"/arrays","title":"Introduction to Arrays"}}},{"node":{"frontmatter":{"order":"9E","path":"/backtrack-maze","title":"Maze Problems"}}},{"node":{"frontmatter":{"order":"9D","path":"/backtrack-nknight","title":"N Knights"}}},{"node":{"frontmatter":{"order":"9B","path":"/backtrack-sudoku","title":"Sudoku Solver"}}},{"node":{"frontmatter":{"order":"9A","path":"/backtracking","title":"Introduction to Backtracking"}}},{"node":{"frontmatter":{"order":"5B","path":"/binarysearch","title":"Binary Search"}}},{"node":{"frontmatter":{"order":"10B","path":"/bitwise-operator","title":"Complete Bitwise Operators"}}},{"node":{"frontmatter":{"order":"4D","path":"/bmmv-algorithm","title":"Boyer-Moore Majority Voting Algorithm"}}},{"node":{"frontmatter":{"order":"9C","path":"/backtrack-nqueen","title":"N Queens"}}},{"node":{"frontmatter":{"order":"5C","path":"/bubblesort","title":"Bubble Sort"}}},{"node":{"frontmatter":{"order":"5F","path":"/countsort","title":"Count Sort"}}},{"node":{"frontmatter":{"order":"5H","path":"/cyclesort","title":"Cyclic Sort"}}},{"node":{"frontmatter":{"order":"3A","path":"/dataTypes","title":"Learn Data Types"}}},{"node":{"frontmatter":{"order":"2C","path":"/firstjavaprogram","title":"First Java Program"}}},{"node":{"frontmatter":{"order":"8B","path":"/flow-of-recursion","title":"Flow of Recursion"}}},{"node":{"frontmatter":{"order":"2A","path":"/flowchart","title":"Flowchart & Pseudocode"}}},{"node":{"frontmatter":{"order":"3F","path":"/functions","title":"Function & Scope"}}},{"node":{"frontmatter":{"order":"20A","path":"/greedy","title":"Introduction to Greedy Algorithms"}}},{"node":{"frontmatter":{"order":"5E","path":"/insertion","title":"Insertion Sort"}}},{"node":{"frontmatter":{"order":"15A","path":"/intro-binarytree","title":"Intro to Binary Tree"}}},{"node":{"frontmatter":{"order":"16A","path":"/intro-bst","title":"Intro to BST"}}},{"node":{"frontmatter":{"order":"7A","path":"/intro-complexity","title":"Complexity Analysis"}}},{"node":{"frontmatter":{"order":"19A","path":"/intro-dp","title":"Introduction to DP"}}},{"node":{"frontmatter":{"order":"12A","path":"/intro-ds","title":"Introduction to Data Structures"}}},{"node":{"frontmatter":{"order":"22A","path":"/intro-graphs","title":"Introduction to Graphs"}}},{"node":{"frontmatter":{"order":"18A","path":"/intro-hashmap","title":"Introduction to Hashmap"}}},{"node":{"frontmatter":{"order":"17A","path":"/intro-heap","title":"Introduction to Heaps"}}},{"node":{"frontmatter":{"order":"12B","path":"/intro-linkedlist","title":"Introduction to Linked List"}}},{"node":{"frontmatter":{"order":"10A","path":"/intro-maths","title":"Introduction to Maths in DSA"}}},{"node":{"frontmatter":{"order":"11A","path":"/intro-oop","title":"Introduction"}}},{"node":{"frontmatter":{"order":"21A","path":"/intro-priorityqueues","title":"Introduction to Priority Queues"}}},{"node":{"frontmatter":{"order":"1B","path":"/intro-programming","title":"Intro to Programming"}}},{"node":{"frontmatter":{"order":"8A","path":"/intro-recursion","title":"Intro to Recursion"}}},{"node":{"frontmatter":{"order":"13A","path":"/intro-stacks","title":"Intro to Stack"}}},{"node":{"frontmatter":{"order":"6A","path":"/intro-string","title":"Intro to Strings"}}},{"node":{"frontmatter":{"order":"14A","path":"/intro-trees","title":"Intro to Trees"}}},{"node":{"frontmatter":{"order":"23A","path":"/intro-tries","title":"Introduction to Tries"}}},{"node":{"frontmatter":{"order":"1A","path":"/introduction","title":"Welcome"}}},{"node":{"frontmatter":{"order":"3C","path":"/io-conditionals","title":"Input/Output & Conditionals"}}},{"node":{"frontmatter":{"order":"4F","path":"/jagged-array","title":"Jagged Arrays"}}},{"node":{"frontmatter":{"order":"2B","path":"/java-setup","title":"Java Development Setup"}}},{"node":{"frontmatter":{"order":"3E","path":"/jumps","title":"Jumps Statements"}}},{"node":{"frontmatter":{"order":"5A","path":"/linearsearch","title":"Linear Search"}}},{"node":{"frontmatter":{"order":"3D","path":"/loops","title":"Loops In Java"}}},{"node":{"frontmatter":{"order":"8E","path":"/mergesort","title":"Merge Sort"}}},{"node":{"frontmatter":{"order":"10C","path":"/num-one","title":"Number Theory Part-A"}}},{"node":{"frontmatter":{"order":"10E","path":"/num-three","title":"Number Theory Part-C"}}},{"node":{"frontmatter":{"order":"10D","path":"/num-two","title":"Number Theory Part-B"}}},{"node":{"frontmatter":{"order":"3B","path":"/operators","title":"Operators in Java"}}},{"node":{"frontmatter":{"order":"5I","path":"/practise-question","title":"Practise Questions"}}},{"node":{"frontmatter":{"order":"4C","path":"/print-patterns","title":"Printing Patterns"}}},{"node":{"frontmatter":{"order":"11C","path":"/properties","title":"Properties of OOP"}}},{"node":{"frontmatter":{"order":"8F","path":"/quicksort","title":"Quick Sort"}}},{"node":{"frontmatter":{"order":"5G","path":"/radixsort","title":"Radix Sort"}}},{"node":{"frontmatter":{"order":"7D","path":"/recurrence","title":"Recurrence Relations"}}},{"node":{"frontmatter":{"order":"8C","path":"/recursion-arrays","title":"Recursion & Array"}}},{"node":{"frontmatter":{"order":"8G","path":"/recursion-practise","title":"Standard Practise Questions"}}},{"node":{"frontmatter":{"order":"8D","path":"/recursion-string","title":"Recursion & Strings"}}},{"node":{"frontmatter":{"order":"5D","path":"/selectionsort","title":"Selection Sort"}}},{"node":{"frontmatter":{"order":"7C","path":"/space-complexity","title":"Space Complexity"}}},{"node":{"frontmatter":{"order":"6B","path":"/string-builder","title":"StringBuilder in Java"}}},{"node":{"frontmatter":{"order":"4E","path":"/subarrays","title":"Subarrays"}}},{"node":{"frontmatter":{"order":"11B","path":"/this-constructor","title":"this Keyword & Constructor"}}},{"node":{"frontmatter":{"order":"7B","path":"/time-complexity","title":"Time Complexity"}}},{"node":{"frontmatter":{"order":"7E","path":"/time_space_tradeoff","title":"Time Space Tradeoff"}}}]}},"pageContext":{}},"staticQueryHashes":["137611351"]}